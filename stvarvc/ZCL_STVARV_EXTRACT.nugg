<?xml version="1.0" encoding="utf-8"?>
<nugget name="ZCL_STVARV_EXTRACT">
 <CLAS CLSNAME="ZCL_STVARV_EXTRACT" VERSION="1" LANGU="E" DESCRIPT="General class for get STVARV values" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <method CLSNAME="ZCL_STVARV_EXTRACT" CMPNAME="GET_PARAMETER" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_STVARV_EXTRACT" CMPNAME="GET_PARAMETER" SCONAME="IV_PARAMETER_NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RVARI_VNAM"/>
   <parameter CLSNAME="ZCL_STVARV_EXTRACT" CMPNAME="GET_PARAMETER" SCONAME="R_RESULT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="RVARI_VAL_255"/>
   <source>METHOD get_parameter.
    IF iv_parameter_name IS INITIAL.
      RETURN.
    ENDIF.

    SELECT SINGLE low
      INTO r_result
      FROM tvarvc
     WHERE name EQ iv_parameter_name
       AND type EQ &apos;P&apos;.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_STVARV_EXTRACT" CMPNAME="GET_PARAMETERS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_STVARV_EXTRACT" CMPNAME="GET_PARAMETERS" SCONAME="IV_PARAMETER_NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RVARI_VNAM"/>
   <parameter CLSNAME="ZCL_STVARV_EXTRACT" CMPNAME="GET_PARAMETERS" SCONAME="R_RESULT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ACE_GENERIC_RANGE_T"/>
   <source>METHOD get_parameters.
    DATA: lr_range  TYPE ace_generic_range,
          lt_tvarvc TYPE STANDARD TABLE OF tvarvc.

    IF iv_parameter_name IS INITIAL.
      RETURN.
    ENDIF.

    IF iv_parameter_name CA &apos;%&apos;.
      SELECT *
        INTO TABLE lt_tvarvc
        FROM tvarvc
       WHERE name LIKE iv_parameter_name
         AND type EQ &apos;P&apos;.
    ELSE.
      SELECT *
        INTO TABLE lt_tvarvc
        FROM tvarvc
       WHERE name EQ iv_parameter_name
         AND type EQ &apos;P&apos;.
    ENDIF.

    IF lt_tvarvc IS INITIAL.
      RETURN.
    ENDIF.

    IF lines( lt_tvarvc ) EQ 1.
      READ TABLE lt_tvarvc ASSIGNING FIELD-SYMBOL(&lt;fs_value&gt;) INDEX 1.
      lr_range-high = &lt;fs_value&gt;-high.
      lr_range-low = &lt;fs_value&gt;-low.
      lr_range-option = &lt;fs_value&gt;-opti.
      lr_range-sign = &lt;fs_value&gt;-sign.
      APPEND lr_range TO r_result.
    ELSE.
      LOOP AT lt_tvarvc ASSIGNING FIELD-SYMBOL(&lt;fs_value2&gt;).
        CLEAR lr_range.
        lr_range-high = &lt;fs_value2&gt;-name.
        lr_range-low = &lt;fs_value2&gt;-low.
        APPEND lr_range TO r_result.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_STVARV_EXTRACT" CMPNAME="GET_PARAMETERS_BY_RANGE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_STVARV_EXTRACT" CMPNAME="GET_PARAMETERS_BY_RANGE" SCONAME="IT_PARAMETER_NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ACE_GENERIC_RANGE_T"/>
   <parameter CLSNAME="ZCL_STVARV_EXTRACT" CMPNAME="GET_PARAMETERS_BY_RANGE" SCONAME="R_RESULT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ACE_GENERIC_RANGE_T"/>
   <source>METHOD get_parameters_by_range.
    DATA: lr_range  TYPE ace_generic_range,
          lt_tvarvc TYPE STANDARD TABLE OF tvarvc.

    IF it_parameter_name IS INITIAL.
      RETURN.
    ENDIF.

    SELECT *
      INTO TABLE lt_tvarvc
      FROM tvarvc
     WHERE name IN it_parameter_name
       AND type EQ &apos;P&apos;.

    IF sy-subrc IS NOT INITIAL.
      RETURN.
    ENDIF.

    LOOP AT lt_tvarvc ASSIGNING FIELD-SYMBOL(&lt;fs_value&gt;).
      CLEAR lr_range.
      lr_range-high = &lt;fs_value&gt;-name.
      lr_range-low = &lt;fs_value&gt;-low.
      APPEND lr_range TO r_result.
    ENDLOOP.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_STVARV_EXTRACT" CMPNAME="GET_SELECTION_OPTIONS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_STVARV_EXTRACT" CMPNAME="GET_SELECTION_OPTIONS" SCONAME="IV_PARAMETER_NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RVARI_VNAM"/>
   <parameter CLSNAME="ZCL_STVARV_EXTRACT" CMPNAME="GET_SELECTION_OPTIONS" SCONAME="R_RESULT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ACE_GENERIC_RANGE_T"/>
   <source>METHOD get_selection_options.
    DATA: lt_tvarvc TYPE STANDARD TABLE OF tvarvc,
          lw_range  TYPE ace_generic_range.

    IF iv_parameter_name IS INITIAL.
      RETURN.
    ENDIF.

    SELECT *
      INTO TABLE lt_tvarvc
      FROM tvarvc
     WHERE name EQ iv_parameter_name
       AND type EQ &apos;S&apos;.

    IF sy-subrc IS NOT INITIAL.
      RETURN.
    ENDIF.

    LOOP AT lt_tvarvc ASSIGNING FIELD-SYMBOL(&lt;fs_value&gt;).
      CLEAR lw_range.
      lw_range-sign = &lt;fs_value&gt;-sign.
      lw_range-option = &lt;fs_value&gt;-opti.
      lw_range-low = &lt;fs_value&gt;-low.
      lw_range-high = &lt;fs_value&gt;-high.
      APPEND lw_range TO r_result.
    ENDLOOP.
  ENDMETHOD.</source>
  </method>
 </CLAS>
</nugget>
